@model ResearchViewModel

@{
    ViewData["Title"] = "Edit Research Project";
}

<div class="max-w-3xl mx-auto px-4">
    <h1 class="text-2xl font-bold">Edit Research Project</h1>

    <div class="mt-4">
        <p class="text-sm text-gray-500">Current Status: 
            <span class="@(Model.Status?.ToLower() switch {
                "inprogress" => "bg-blue-100 text-blue-800",
                "completed" => "bg-green-100 text-green-800",
                _ => "bg-gray-100 text-gray-800"
            }) inline-flex rounded-full px-2 text-xs font-semibold">
                @Model.Status
            </span>
        </p>
    </div>

    <form asp-action="Edit" method="post">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="Status" />
        <div asp-validation-summary="ModelOnly" class="text-red-500 mb-4"></div>

        <!-- Research Title -->
        <div class="mt-4">
            <label asp-for="Title" class="block font-medium text-gray-700">Research Title</label>
            <input asp-for="Title" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
            <span asp-validation-for="Title" class="text-red-500 text-sm"></span>
        </div>

        <!-- Advisor -->
        <div class="mt-4">
            <label asp-for="AdvisorId" class="block font-medium text-gray-700">Advisor</label>
            <select asp-for="AdvisorId" asp-items="Model.Advisors" 
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                <option value="">Select Advisor</option>
            </select>
            <span asp-validation-for="AdvisorId" class="text-red-500 text-sm"></span>
        </div>

        <!-- Students Section -->
        <div class="mt-6">
            <h3 class="text-lg font-medium text-gray-900">Research Students</h3>
            
            <!-- Current Students List -->
            @if (Model.Students != null && Model.Students.Any())
            {
                <div class="mt-4 overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Role</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Joined Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var student in Model.Students)
                            {
                                <tr>
                                    <td class="px-6 py-4 whitespace-nowrap">@student.StudentName</td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="@(student.IsLeader ? "bg-green-100 text-green-800" : "bg-blue-100 text-blue-800") px-2 inline-flex text-xs leading-5 font-semibold rounded-full">
                                            @(student.IsLeader ? "Leader" : "Member")
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">@student.JoinedDate.ToShortDateString()</td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @if (!student.IsLeader)  @* แสดงปุ่ม Remove เฉพาะสมาชิกที่ไม่ใช่หัวหน้ากลุ่ม *@
                                        {
                                            <button type="button" class="text-red-600 hover:text-red-900"
                                                    onclick="removeStudent(@student.Id)">
                                                Remove
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <p class="mt-4 text-gray-500">No students have been added to this research project yet.</p>
            }

            <!-- Add New Student -->
            <div class="mt-4 bg-gray-50 p-4 rounded-lg">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Add New Student</h4>
                <div class="flex items-end space-x-4">
                    <div class="flex-grow">
                        <select id="newStudentId" asp-items="Model.AvailableStudents" 
                                class="block w-full rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500">
                            <option value="">Select Student</option>
                        </select>
                    </div>
                    <button type="button" onclick="addStudent()" 
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Add Student
                    </button>
                </div>
            </div>
        </div>

        <!-- Buttons -->
        <div class="mt-8 flex justify-end space-x-4">
            <a asp-action="Index" class="px-4 py-2 border rounded-md text-gray-700 hover:bg-gray-50">Cancel</a>
            <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Save Changes
            </button>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        function addStudent() {
            const studentId = document.getElementById('newStudentId').value;
            
            if (!studentId) {
                alert('Please select a student');
                return;
            }

            fetch('/Research/AddStudent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    researchId: @Model.Id,
                    studentId: studentId,
                    isLeader: false
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to add student');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to add student: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add student. Please try again.');
            });
        }

        function removeStudent(researchStudentId) {
            if (!confirm('Are you sure you want to remove this student?')) {
                return;
            }

            fetch('/Research/RemoveStudent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    researchStudentId: researchStudentId
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to remove student');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to remove student: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to remove student. Please try again.');
            });
        }
    </script>
}